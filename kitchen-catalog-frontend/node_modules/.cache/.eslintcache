[{"D:\\kitchen-catalog-frontend\\src\\index.js":"1","D:\\kitchen-catalog-frontend\\src\\App.js":"2","D:\\kitchen-catalog-frontend\\src\\reportWebVitals.js":"3"},{"size":515,"mtime":1721754911783,"results":"4","hashOfConfig":"5"},{"size":6174,"mtime":1723912344390,"results":"6","hashOfConfig":"5"},{"size":375,"mtime":1721755151230,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"sx0ies",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"D:\\kitchen-catalog-frontend\\src\\index.js",[],["16","17"],"D:\\kitchen-catalog-frontend\\src\\App.js",["18"],"import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './App.css';\r\nimport {\r\n  Container, Grid, Typography, Card, CardContent, CardMedia, Checkbox, FormControlLabel,\r\n  Tabs, Tab, Button, FormGroup, CircularProgress, Box, Alert, Badge\r\n} from '@mui/material';\r\n\r\nconst App = () => {\r\n  const [cabinets, setCabinets] = useState([]);\r\n  const [selectedCabinets, setSelectedCabinets] = useState([]);\r\n  const [category, setCategory] = useState('base');\r\n  const [selectedDimensions, setSelectedDimensions] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n  const [message, setMessage] = useState('');\r\n  const [totalCarbonFootprint, setTotalCarbonFootprint] = useState(0);\r\n\r\n  useEffect(() => {\r\n  axios.get('http://localhost:5000/api/cabinets')\r\n    .then(response => {\r\n      console.log(\"Cabinet Data:\", response.data); // Check the data received\r\n      setCabinets(response.data);\r\n    })\r\n    .catch(error => {\r\n      console.error(\"There was an error fetching the cabinets!\", error);\r\n    });\r\n}, []);\r\n\r\n  const handleSelection = (cabinetId) => {\r\n    setSelectedCabinets(prev =>\r\n      prev.includes(cabinetId) ? prev.filter(id => id !== cabinetId) : [...prev, cabinetId]\r\n    );\r\n  };\r\n\r\n  const handleDimensionSelection = (cabinetType, subcatName, width) => {\r\n\t  setSelectedDimensions(prev => {\r\n\t\tconst currentSelections = prev[cabinetType]?.[subcatName] || [];\r\n\t\tconst updatedSelections = currentSelections.includes(width)\r\n\t\t  ? currentSelections.filter(w => w !== width)\r\n\t\t  : [...currentSelections, width];\r\n\r\n\t\t// Find the selected dimension and its carbon footprint\r\n\t\tconst selectedSubcat = cabinets.find(c => c.type === cabinetType).subcategories.find(s => s.name === subcatName);\r\n\t\tconst selectedDimension = selectedSubcat.dimensions.find(d => d.width === width);\r\n\r\n\t\t// Calculate the new total carbon footprint\r\n\t\tconst footprintChange = selectedDimension.carbonFootprint * (updatedSelections.includes(width) ? 1 : -1);\r\n\t\tsetTotalCarbonFootprint(prevTotal => prevTotal + footprintChange);\r\n\r\n\t\treturn {\r\n\t\t  ...prev,\r\n\t\t  [cabinetType]: {\r\n\t\t\t...prev[cabinetType],\r\n\t\t\t[subcatName]: updatedSelections\r\n\t\t  }\r\n\t\t};\r\n\t  });\r\n\t};\r\n\r\n  const handleSubmit = () => {\r\n    setLoading(true);\r\n    setMessage('');\r\n    const data = { selectedCabinets, selectedDimensions };\r\n    axios.post('http://localhost:5000/api/save-selections', data)\r\n      .then(response => {\r\n        setLoading(false);\r\n        setMessage('Selections saved successfully');\r\n      })\r\n      .catch(error => {\r\n        setLoading(false);\r\n        setMessage('Error saving selections');\r\n        console.error('Error saving selections:', error);\r\n      });\r\n  };\r\n\r\n  const handleCategoryChange = (event, newCategory) => {\r\n    setCategory(newCategory);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setSelectedCabinets([]);\r\n    setSelectedDimensions({});\r\n\tsetTotalCarbonFootprint(0);\r\n    setMessage('');\r\n  };\r\n\r\n  const countSelectedInCategory = (categoryType) => {\r\n    const categorySelections = selectedDimensions[categoryType] || {};\r\n    return Object.values(categorySelections).flat().length;\r\n  };\r\n\r\n  return (\r\n\t  <Container>\r\n\t\t<Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n\t\t  <Typography variant=\"h3\" gutterBottom>Kitchen Catalog</Typography>\r\n\t\t  <Typography variant=\"h6\">\r\n\t\t\tTotal Carbon Footprint: {totalCarbonFootprint.toFixed(2)} kg CO2e\r\n\t\t  </Typography>\r\n\t\t</Box>\r\n\t\t<Tabs value={category} onChange={handleCategoryChange} aria-label=\"category tabs\">\r\n\t\t  <Tab label={<Badge color=\"secondary\" badgeContent={countSelectedInCategory('base')}>Base Cabinets</Badge>} value=\"base\" />\r\n\t\t  <Tab label={<Badge color=\"secondary\" badgeContent={countSelectedInCategory('wall')}>Wall Cabinets</Badge>} value=\"wall\" />\r\n\t\t  <Tab label={<Badge color=\"secondary\" badgeContent={countSelectedInCategory('tall')}>Tall Cabinets</Badge>} value=\"tall\" />\r\n\t\t</Tabs>\r\n\t\t<Grid container spacing={3}>\r\n\t\t  {cabinets.filter(cabinet => cabinet.type === category).map(cabinet => (\r\n\t\t\tcabinet.subcategories.map((subcat, index) => (\r\n\t\t\t  <Grid item xs={12} sm={6} md={4} key={index}>\r\n\t\t\t\t<Card>\r\n\t\t\t\t  <div style={{ width: 256, height: 256, overflow: 'hidden', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n\t\t\t\t\t<CardMedia\r\n\t\t\t\t\t  component=\"img\"\r\n\t\t\t\t\t  style={{ maxWidth: '100%', maxHeight: '100%' }}\r\n\t\t\t\t\t  image={subcat.image_url}\r\n\t\t\t\t\t  alt={subcat.name}\r\n\t\t\t\t\t/>\r\n\t\t\t\t  </div>\r\n\t\t\t\t  <CardContent>\r\n\t\t\t\t\t<Typography gutterBottom variant=\"h5\" component=\"div\">\r\n\t\t\t\t\t  {subcat.name}\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t<Typography variant=\"body2\" color=\"text.secondary\">\r\n\t\t\t\t\t  Select Width\r\n\t\t\t\t\t</Typography>\r\n\t\t\t\t\t{subcat.dimensions.length > 0 && (\r\n\t\t\t\t\t  <FormGroup>\r\n\t\t\t\t\t\t{subcat.dimensions.map((dim, idx) => (\r\n\t\t\t\t\t\t  <FormControlLabel\r\n\t\t\t\t\t\t\tkey={idx}\r\n\t\t\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t\t  <Checkbox\r\n\t\t\t\t\t\t\t\tchecked={selectedDimensions[cabinet.type]?.[subcat.name]?.includes(dim.width) || false}\r\n\t\t\t\t\t\t\t\tonChange={() => handleDimensionSelection(cabinet.type, subcat.name, dim.width)}\r\n\t\t\t\t\t\t\t  />\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlabel={`${dim.width}`}\r\n\t\t\t\t\t\t  />\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t{selectedDimensions[cabinet.type]?.[subcat.name]?.length > 0 && (\r\n\t\t\t\t\t\t  <Typography variant=\"body2\" color=\"text.secondary\" style={{ marginTop: 8 }}>\r\n\t\t\t\t\t\t\tCarbon Footprint: {subcat.dimensions.find(dim => selectedDimensions[cabinet.type]?.[subcat.name]?.includes(dim.width)).carbonFootprint.toFixed(2)} kg CO2e\r\n\t\t\t\t\t\t  </Typography>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t  </FormGroup>\r\n\t\t\t\t\t)}\r\n\t\t\t\t  </CardContent>\r\n\t\t\t\t</Card>\r\n\t\t\t  </Grid>\r\n\t\t\t))\r\n\t\t  ))}\r\n\t\t</Grid>\r\n\t\t<Box mt={3}>\r\n\t\t  <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit} disabled={loading}>\r\n\t\t\tSave Selection\r\n\t\t  </Button>\r\n\t\t  <Button variant=\"outlined\" color=\"secondary\" onClick={handleReset} disabled={loading} style={{ marginLeft: 15 }}>\r\n\t\t\tReset\r\n\t\t  </Button>\r\n\t\t  {loading && <CircularProgress size={24} style={{ marginLeft: 15 }} />}\r\n\t\t</Box>\r\n\t\t{message && (\r\n\t\t  <Box mt={3}>\r\n\t\t\t<Alert severity={message.includes('Error') ? 'error' : 'success'}>{message}</Alert>\r\n\t\t  </Box>\r\n\t\t)}\r\n\t  </Container>\r\n\t);\r\n};\r\n\r\nexport default App;","D:\\kitchen-catalog-frontend\\src\\reportWebVitals.js",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":29,"column":9,"nodeType":"25","messageId":"26","endLine":29,"endColumn":24},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"no-unused-vars","'handleSelection' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]